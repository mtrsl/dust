// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// densities.cpp
SEXP density_binomial(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, bool log);
extern "C" SEXP _dust_density_binomial(SEXP x, SEXP size, SEXP prob, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_binomial(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_normal(cpp11::doubles x, cpp11::doubles mu, cpp11::doubles sd, bool log);
extern "C" SEXP _dust_density_normal(SEXP x, SEXP mu, SEXP sd, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_normal(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_negative_binomial_mu(cpp11::integers x, cpp11::doubles size, cpp11::doubles mu, bool log, bool is_float);
extern "C" SEXP _dust_density_negative_binomial_mu(SEXP x, SEXP size, SEXP mu, SEXP log, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_negative_binomial_mu(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<bool>>(log), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// densities.cpp
SEXP density_negative_binomial_prob(cpp11::integers x, cpp11::doubles size, cpp11::doubles prob, bool log);
extern "C" SEXP _dust_density_negative_binomial_prob(SEXP x, SEXP size, SEXP prob, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_negative_binomial_prob(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_beta_binomial(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, cpp11::doubles rho, bool log);
extern "C" SEXP _dust_density_beta_binomial(SEXP x, SEXP size, SEXP prob, SEXP rho, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_beta_binomial(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rho), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_poisson(cpp11::integers x, cpp11::doubles lambda, bool log);
extern "C" SEXP _dust_density_poisson(SEXP x, SEXP lambda, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_poisson(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// dust_rng.cpp
SEXP dust_rng_alloc(cpp11::sexp r_seed, int n_streams, bool deterministic, bool is_float);
extern "C" SEXP _dust_dust_rng_alloc(SEXP r_seed, SEXP n_streams, SEXP deterministic, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<int>>(n_streams), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
void dust_rng_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
void dust_rng_long_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_long_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_long_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_random_real(SEXP ptr, int n, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_random_real(SEXP ptr, SEXP n, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_random_real(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_random_normal(SEXP ptr, int n, int n_threads, std::string algorithm, bool is_float);
extern "C" SEXP _dust_dust_rng_random_normal(SEXP ptr, SEXP n, SEXP n_threads, SEXP algorithm, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_random_normal(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_uniform(SEXP ptr, int n, cpp11::doubles r_min, cpp11::doubles r_max, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_uniform(SEXP ptr, SEXP n, SEXP r_min, SEXP r_max, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_uniform(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_max), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_exponential(SEXP ptr, int n, cpp11::doubles r_rate, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_exponential(SEXP ptr, SEXP n, SEXP r_rate, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_exponential(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_rate), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_normal(SEXP ptr, int n, cpp11::doubles r_mean, cpp11::doubles r_sd, int n_threads, std::string algorithm, bool is_float);
extern "C" SEXP _dust_dust_rng_normal(SEXP ptr, SEXP n, SEXP r_mean, SEXP r_sd, SEXP n_threads, SEXP algorithm, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_normal(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_sd), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_binomial(SEXP ptr, int n, cpp11::doubles r_size, cpp11::doubles r_prob, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_binomial(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_binomial(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_nbinomial(SEXP ptr, int n, cpp11::doubles r_size, cpp11::doubles r_prob, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_nbinomial(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_nbinomial(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_hypergeometric(SEXP ptr, int n, cpp11::doubles r_n1, cpp11::doubles r_n2, cpp11::doubles r_k, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_hypergeometric(SEXP ptr, SEXP n, SEXP r_n1, SEXP r_n2, SEXP r_k, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_hypergeometric(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_n1), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_n2), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_k), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_gamma(SEXP ptr, int n, cpp11::doubles r_a, cpp11::doubles r_b, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_gamma(SEXP ptr, SEXP n, SEXP r_a, SEXP r_b, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_gamma(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_a), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_b), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_poisson(SEXP ptr, int n, cpp11::doubles r_lambda, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_poisson(SEXP ptr, SEXP n, SEXP r_lambda, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_poisson(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_lambda), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_cauchy(SEXP ptr, int n, cpp11::doubles r_location, cpp11::doubles r_scale, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_cauchy(SEXP ptr, SEXP n, SEXP r_location, SEXP r_scale, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_cauchy(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_location), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_scale), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_multinomial(SEXP ptr, int n, cpp11::doubles r_size, cpp11::doubles r_prob, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_multinomial(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_multinomial(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_state(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_state(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng_pointer.cpp
cpp11::sexp dust_rng_pointer_init(int n_streams, cpp11::sexp seed, int long_jump, std::string algorithm);
extern "C" SEXP _dust_dust_rng_pointer_init(SEXP n_streams, SEXP seed, SEXP long_jump, SEXP algorithm) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_pointer_init(cpp11::as_cpp<cpp11::decay_t<int>>(n_streams), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(seed), cpp11::as_cpp<cpp11::decay_t<int>>(long_jump), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm)));
  END_CPP11
}
// dust_rng_pointer.cpp
void dust_rng_pointer_sync(cpp11::environment obj, std::string algorithm);
extern "C" SEXP _dust_dust_rng_pointer_sync(SEXP obj, SEXP algorithm) {
  BEGIN_CPP11
    dust_rng_pointer_sync(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm));
    return R_NilValue;
  END_CPP11
}
// dust_rng_pointer.cpp
double test_rng_pointer_get(cpp11::environment obj, int n_streams);
extern "C" SEXP _dust_test_rng_pointer_get(SEXP obj, SEXP n_streams) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_rng_pointer_get(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj), cpp11::as_cpp<cpp11::decay_t<int>>(n_streams)));
  END_CPP11
}
// openmp.cpp
cpp11::writable::list cpp_openmp_info();
extern "C" SEXP _dust_cpp_openmp_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_openmp_info());
  END_CPP11
}
// test_cuda_launch_control.cpp
SEXP test_cuda_pars(cpp11::sexp r_gpu_config, int n_particles, int n_particles_each, int n_state, int n_state_full, int n_shared_int, int n_shared_real, int data_size, int shared_size);
extern "C" SEXP _dust_test_cuda_pars(SEXP r_gpu_config, SEXP n_particles, SEXP n_particles_each, SEXP n_state, SEXP n_state_full, SEXP n_shared_int, SEXP n_shared_real, SEXP data_size, SEXP shared_size) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_cuda_pars(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_gpu_config), cpp11::as_cpp<cpp11::decay_t<int>>(n_particles), cpp11::as_cpp<cpp11::decay_t<int>>(n_particles_each), cpp11::as_cpp<cpp11::decay_t<int>>(n_state), cpp11::as_cpp<cpp11::decay_t<int>>(n_state_full), cpp11::as_cpp<cpp11::decay_t<int>>(n_shared_int), cpp11::as_cpp<cpp11::decay_t<int>>(n_shared_real), cpp11::as_cpp<cpp11::decay_t<int>>(data_size), cpp11::as_cpp<cpp11::decay_t<int>>(shared_size)));
  END_CPP11
}
// test_interpolate.cpp
int test_interpolate_search(double target, std::vector<double> x);
extern "C" SEXP _dust_test_interpolate_search(SEXP target, SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_interpolate_search(cpp11::as_cpp<cpp11::decay_t<double>>(target), cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(x)));
  END_CPP11
}
// test_interpolate.cpp
double test_interpolate_constant1(std::vector<double> t, std::vector<double> y, double z);
extern "C" SEXP _dust_test_interpolate_constant1(SEXP t, SEXP y, SEXP z) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_interpolate_constant1(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(t), cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(y), cpp11::as_cpp<cpp11::decay_t<double>>(z)));
  END_CPP11
}
// test_interpolate.cpp
double test_interpolate_linear1(std::vector<double> t, std::vector<double> y, double z);
extern "C" SEXP _dust_test_interpolate_linear1(SEXP t, SEXP y, SEXP z) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_interpolate_linear1(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(t), cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(y), cpp11::as_cpp<cpp11::decay_t<double>>(z)));
  END_CPP11
}
// test_interpolate.cpp
double test_interpolate_spline1(std::vector<double> t, std::vector<double> y, double z);
extern "C" SEXP _dust_test_interpolate_spline1(SEXP t, SEXP y, SEXP z) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_interpolate_spline1(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(t), cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(y), cpp11::as_cpp<cpp11::decay_t<double>>(z)));
  END_CPP11
}
// test_rng.cpp
std::vector<std::string> test_xoshiro_run(cpp11::environment obj);
extern "C" SEXP _dust_test_xoshiro_run(SEXP obj) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_xoshiro_run(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj)));
  END_CPP11
}
// tools.cpp
cpp11::list cpp_scale_log_weights(std::vector<double> w);
extern "C" SEXP _dust_cpp_scale_log_weights(SEXP w) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_scale_log_weights(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(w)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_dust_cpp_openmp_info",                (DL_FUNC) &_dust_cpp_openmp_info,                0},
    {"_dust_cpp_scale_log_weights",          (DL_FUNC) &_dust_cpp_scale_log_weights,          1},
    {"_dust_density_beta_binomial",          (DL_FUNC) &_dust_density_beta_binomial,          5},
    {"_dust_density_binomial",               (DL_FUNC) &_dust_density_binomial,               4},
    {"_dust_density_negative_binomial_mu",   (DL_FUNC) &_dust_density_negative_binomial_mu,   5},
    {"_dust_density_negative_binomial_prob", (DL_FUNC) &_dust_density_negative_binomial_prob, 4},
    {"_dust_density_normal",                 (DL_FUNC) &_dust_density_normal,                 4},
    {"_dust_density_poisson",                (DL_FUNC) &_dust_density_poisson,                3},
    {"_dust_dust_rng_alloc",                 (DL_FUNC) &_dust_dust_rng_alloc,                 4},
    {"_dust_dust_rng_binomial",              (DL_FUNC) &_dust_dust_rng_binomial,              6},
    {"_dust_dust_rng_cauchy",                (DL_FUNC) &_dust_dust_rng_cauchy,                6},
    {"_dust_dust_rng_exponential",           (DL_FUNC) &_dust_dust_rng_exponential,           5},
    {"_dust_dust_rng_gamma",                 (DL_FUNC) &_dust_dust_rng_gamma,                 6},
    {"_dust_dust_rng_hypergeometric",        (DL_FUNC) &_dust_dust_rng_hypergeometric,        7},
    {"_dust_dust_rng_jump",                  (DL_FUNC) &_dust_dust_rng_jump,                  2},
    {"_dust_dust_rng_long_jump",             (DL_FUNC) &_dust_dust_rng_long_jump,             2},
    {"_dust_dust_rng_multinomial",           (DL_FUNC) &_dust_dust_rng_multinomial,           6},
    {"_dust_dust_rng_nbinomial",             (DL_FUNC) &_dust_dust_rng_nbinomial,             6},
    {"_dust_dust_rng_normal",                (DL_FUNC) &_dust_dust_rng_normal,                7},
    {"_dust_dust_rng_pointer_init",          (DL_FUNC) &_dust_dust_rng_pointer_init,          4},
    {"_dust_dust_rng_pointer_sync",          (DL_FUNC) &_dust_dust_rng_pointer_sync,          2},
    {"_dust_dust_rng_poisson",               (DL_FUNC) &_dust_dust_rng_poisson,               5},
    {"_dust_dust_rng_random_normal",         (DL_FUNC) &_dust_dust_rng_random_normal,         5},
    {"_dust_dust_rng_random_real",           (DL_FUNC) &_dust_dust_rng_random_real,           4},
    {"_dust_dust_rng_state",                 (DL_FUNC) &_dust_dust_rng_state,                 2},
    {"_dust_dust_rng_uniform",               (DL_FUNC) &_dust_dust_rng_uniform,               6},
    {"_dust_test_cuda_pars",                 (DL_FUNC) &_dust_test_cuda_pars,                 9},
    {"_dust_test_interpolate_constant1",     (DL_FUNC) &_dust_test_interpolate_constant1,     3},
    {"_dust_test_interpolate_linear1",       (DL_FUNC) &_dust_test_interpolate_linear1,       3},
    {"_dust_test_interpolate_search",        (DL_FUNC) &_dust_test_interpolate_search,        2},
    {"_dust_test_interpolate_spline1",       (DL_FUNC) &_dust_test_interpolate_spline1,       3},
    {"_dust_test_rng_pointer_get",           (DL_FUNC) &_dust_test_rng_pointer_get,           2},
    {"_dust_test_xoshiro_run",               (DL_FUNC) &_dust_test_xoshiro_run,               1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_dust(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
